#!/bin/sh

TOPDIR=~/.vimenv

cleanup()
{
	TARGET=$1
	shift
	echo "cleanup $TARGET..."

	num=`ls $TOPDIR/versions/$TARGET|wc -l`
	i=1
	for dir in `ls $TOPDIR/versions/$TARGET`; do
		if [ $i -lt $num ]; then
			echo "rm -rf $TOPDIR/versions/$TARGET/$dir"
			rm -rf $TOPDIR/versions/$TARGET/$dir
		fi
		i=`expr $i + 1`
	done
	echo "done!\n"
}

init()
{
	touch $TOPDIR/default-vim
	mkdir -p $TOPDIR/versions
	mkdir -p $TOPDIR/src
	cd $TOPDIR/src
	git clone https://github.com/vim/vim.git
	git clone https://github.com/neovim/neovim.git

	echo "vim:set default vim compile options to $TOPDIR/default-vim"
}

install_list()
{
	TARGET=$1
	if [ -z $TARGET ]; then
		TARGET='all'
	fi

	if [ $TARGET = 'vim' -o 'all' ]; then
		cd $TOPDIR/src/vim
		echo '- vim versions'
		git tag|tail -n 5
		echo "HEAD"
		echo ''
	fi

	if [ $TARGET = 'neovim' -o 'all' ]; then
		cd $TOPDIR/src/neovim
		echo '- neovim versions'
		git tag|tail -n 5
		echo "nightly"
		echo "stable"
		echo "HEAD"
	fi
}

update_target()
{
	TARGET=$1
	shift

	cd $TOPDIR/src/$TARGET/src
	make distclean 1>/dev/null 2>&1
	git checkout master 1>/dev/null 2>&1
	git pull origin master 1>/dev/null 2>&1
	git pull --tags 1>/dev/null 2>&1
}

update()
{
	case $1 in
		all)
			update_target 'vim'
			update_target 'neovim'
			;;
		vim)
			update_target 'vim'
			;;
		neovim)
			update_target 'neovim'
			;;
	esac
}

versions()
{
	echo "install list"
	echo "- vim"
	ls $TOPDIR/versions/vim 2>/dev/null
	echo ''
	echo "- neovim"
	ls $TOPDIR/versions/neovim 2>/dev/null
}

build_vim()
{
	TARGET='vim'
	VERSION=$1
	shift

	echo "$TARGET($VERSION) install start"

	INSTALL_DIR=$TOPDIR/versions/$TARGET/$VERSION

	update 'vim'

	cd $TOPDIR/src/$TARGET/src
	git checkout $VERSION 1>/dev/null 2>&1
	if [ $? -ne 0 ]; then
		return 1
	fi

	OPT="--disable-gui --without-x --enable-multibyte"
	if [ `uname`=='Darwin' ]; then
		OPT="$OPT --disable-darwin --enable-multibyte"
	fi

	DEFAULT_OPT=`cat $TOPDIR/default-vim 2> file`

	rm -f $TOPDIR/$TARGET.install.log
	make distclean 1>/dev/null 2>&1
	./configure --prefix=$INSTALL_DIR $OPT $DEFAULT_OPT $* > $TOPDIR/$TARGET.install.log 2>&1 && \
	make >> $TOPDIR/$TARGET.install.log 2>&1 && \
	make install >> $TOPDIR/$TARGET.install.log 2>&1

	if [ $? -ne 0 ]; then
		echo "Install faild!"
		echo "See logfile:$TOPDIR/$TARGET.install.log"
		return 1
	fi
	rm -f $TOPDIR/$TARGET.install.log
	echo "Install success"
}

build_neovim()
{
	TARGET='neovim'
	VERSION=$1
	shift

	echo "$TARGET($VERSION) install start"

	INSTALL_DIR=$TOPDIR/versions/$TARGET/$VERSION

	update 'neovim'

	cd $TOPDIR/src/$TARGET
	make distclean 1>/dev/null 2>&1

	git checkout $VERSION 1>/dev/null 2>&1
	if [ $? -ne 0 ]; then
		return 1
	fi

	rm -f $TOPDIR/$TARGET.install.log
	CMAKE_EXTRA_FLAGS="-DCMAKE_INSTALL_PREFIX=$INSTALL_DIR" make $* > $TOPDIR/$TARGET.install.log 2>&1 && \
	make install >> $TOPDIR/$TARGET.install.log 2>&1

	if [ $? -ne 0 ]; then
		echo "Install faild!"
		echo "See logfile:$TOPDIR/$TARGET.install.log"
		return 1
	fi
	rm -f $TOPDIR/$TARGET.install.log
	echo "Install success"

	cd $INSTALL_DIR/bin
	ln -s nvim vim
}

build()
{
	TARGET=$1
	VERSION=$2
	shift
	shift

	if [ $TARGET != "vim" -a $TARGET != "neovim" ]; then
		echo "target is vim/neovim"
		return 1
	fi

	INSTALL_DIR=$TOPDIR/versions/$TARGET/$VERSION
	if [ -e $INSTALL_DIR ]; then
		echo "$TARGET($VERSION) installed"
		return 1
	fi

	mkdir -p $TOPDIR/versions/$TARGET

	case $TARGET in
		vim)
			build_vim $VERSION $*
			;;
		neovim)
			build_neovim $VERSION $*
			;;
	esac

	if [ $? -ne 0 ]; then
		cd $TOPDIR
		rm -rf $INSTALL_DIR
		return 1
	fi
}

print_help()
{
	echo "vimenv command ..."
	echo "cleanup                      delete old versions"
	echo "list  <target>               print installalbe vim versions"
	echo "install <target> <version>   install vim"
	echo "global  <target> <version>   use vim"
	echo "update                       update"
	echo "versions                     print install versions"
}

case $1 in
	cleanup)
		echo "cleanup start..."
		cleanup 'vim'
		cleanup 'neovim'
		;;
	init)
		shift
		init
		;;
	list)
		shift
		install_list $*
		;;
	install)
		shift
		build $*
		;;
	global)
		shift
		rm -f $TOPDIR/libexec
		case $1 in
			system)
				;;
			*)
				ln -s $TOPDIR/versions/$1/$2 $TOPDIR/libexec
				;;
		esac
		;;
	update)
		shift
		update 'all'
		;;
	versions)
		shift
		versions
		;;
	*)
		print_help
		;;
esac
